openapi: 3.0.1
info:
  title: My Car
  description: 'This is a sample server My Car. In which we can add, update and delete people,
  cars and assign cars to people.'
  termsOfService: http://mycar.com/terms/
  contact:
    email: eduardo.mendez@encora.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api
tags:
  - name: people
    description: Main identifying data for people
    externalDocs:
      description: Find out more
      url: https://github.com/iuresti/java-training/blob/master/spring-boot.md
  - name: car
    description: Main identifying data for cars
  - name: people_car
    description: Assign cars to people
    externalDocs:
      description: Find out more about
      url: https://github.com/iuresti/java-training/blob/master/spring-boot.md
paths:
  /people:
    get:
      tags:
        - people
      summary: Returns a list of people
      description: Obtain a list of people
      operationId: fetchAllPeople
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
      x-codegen-request-body-name: body
    post:
      tags:
        - people
      summary: Add a new person
      operationId: addPeople
      requestBody:
        description: Create a new person in the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/People'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
        404:
          description: Invalid request
          content: { }
      x-codegen-request-body-name: body
  /people/{guid}:
    get:
      tags:
        - people
      summary: Find person by ID
      description: Returns a single person
      operationId: fetchPeopleById
      parameters:
        - name: guid
          in: path
          description: ID of person to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Person not found
          content: { }
    post:
      tags:
        - people
      summary: Creates a new person
      operationId: addPeopleWithGUID
      parameters:
        - name: guid
          in: path
          description: ID of person that needs to be created
          required: true
          schema:
            type: string
      requestBody:
        description: Person object to be added to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/People'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
        400:
          description: Invalid request
          content: { }
    put:
      tags:
        - people
      summary: Updated person
      description: Update an existing person
      operationId: updatePeople
      parameters:
        - name: guid
          in: path
          description: GUID that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Person that needs to be added to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/People'
        required: true
      responses:
        200:
          description: Successful operation
          content: { }
        400:
          description: Invalid GUID supplied
          content: { }
        404:
          description: Person not found
          content: { }
      x-codegen-request-body-name: body
    delete:
      tags:
        - people
      summary: Deletes a person
      operationId: deletePeople
      parameters:
        - name: guid
          in: path
          description: Person id to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content: { }
        400:
          description: Invalid GUID supplied
          content: { }
        404:
          description: Person not found
          content: { }
  /cars:
    get:
      tags:
        - car
      summary: Returns a list of cars
      description: Obtain a list of cars
      operationId: fetchAllCars
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
      x-codegen-request-body-name: body
    post:
      tags:
        - car
      summary: Add a new car
      operationId: addCar
      requestBody:
        description: Create a new car in the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        404:
          description: Invalid request
          content: { }
      x-codegen-request-body-name: body
  /cars/{vin}:
    get:
      tags:
        - car
      summary: Find car by VIN
      description: Returns a single car
      operationId: fetchCarById
      parameters:
        - name: vin
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Person not found
          content: { }
    post:
      tags:
        - car
      summary: Creates a new car
      operationId: addCarWithVIN
      parameters:
        - name: vin
          in: path
          description: ID of car that needs to be created
          required: true
          schema:
            type: string
      requestBody:
        description: Car object to be added to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          description: Invalid request
          content: { }
    put:
      tags:
        - car
      summary: Updated car
      description: Update an existing car
      operationId: updateCar
      parameters:
        - name: vin
          in: path
          description: VIN that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Car that needs to be added to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        200:
          description: Successful operation
          content: { }
        400:
          description: Invalid GUID supplied
          content: { }
        404:
          description: Person not found
          content: { }
      x-codegen-request-body-name: body
    delete:
      tags:
        - car
      summary: Deletes a car
      operationId: deleteCar
      parameters:
        - name: vin
          in: path
          description: Car id to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content: { }
        400:
          description: Invalid VIN supplied
          content: { }
        404:
          description: Car not found
          content: { }
  /people/cars:
    get:
      tags:
        - PeopleCar
      summary: Returns a list of people and cars relations
      description: Obtain a list of people and cars
      operationId: fetchAllPeopleCars
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PeopleCar'
      x-codegen-request-body-name: body
    post:
      tags:
        - PeopleCar
      summary: Add a new people car relation
      operationId: addPeopleCar
      requestBody:
        description: Create a new people car in the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeopleCar'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeopleCar'
        404:
          description: Invalid request
          content: { }
      x-codegen-request-body-name: body
  /cars/{vin}/people:
    get:
      tags:
        - PeopleCar
      summary: Returns a list of people assigned to the given car VIN
      description: Obtain a list of people related to a car
      operationId: fetchAllCarPeople
      parameters:
        - name: vin
          in: path
          description: ID of searched car
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
      x-codegen-request-body-name: body
  /people/{guid}/cars:
    get:
      tags:
        - PeopleCar
      summary: Returns a list of cars assigned to the given person GUID
      description: Obtain a list of cars related to a person
      operationId: fetchAllPersonCars
      parameters:
        - name: guid
          in: path
          description: ID of searched person
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
      x-codegen-request-body-name: body
components:
  schemas:
    People:
      required:
        - firstName
        - lastName
        - email
        - gender
      type: object
      properties:
        guid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          type: string
      xml:
        name: Order
    Car:
      required:
        - brand
        - model
        - year
        - color
      type: object
      properties:
        vin:
          type: string
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
          format: int32
        color:
          type: string
      xml:
        name: Car
    PeopleCar:
      required:
        - peopleId
        - carId
      type: object
      properties:
        uuid:
          type: string
        peopleId:
          type: string
        carId:
          type: string
      xml:
        name: PeopleCar