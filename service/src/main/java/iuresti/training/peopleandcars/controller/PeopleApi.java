/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package iuresti.training.peopleandcars.controller;

import iuresti.training.peopleandcars.modelapi.Car;
import iuresti.training.peopleandcars.modelapi.People;
import iuresti.training.peopleandcars.modelapi.PeopleCar;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T18:10:17.554620-06:00[America/Mexico_City]")
@Validated
public interface PeopleApi {

    /**
     * POST /people : Add a new person
     *
     * @param body Create a new person in the DB (required)
     * @return Successful operation (status code 201)
     *         or Invalid request (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/people",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<People> addPeople(
         @Valid @RequestBody People body
    );


    /**
     * POST /people/cars : Add a new people car relation
     *
     * @param body Create a new people car in the DB (required)
     * @return Successful operation (status code 201)
     *         or Invalid request (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/people/cars",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<PeopleCar> addPeopleCar(
         @Valid @RequestBody PeopleCar body
    );


    /**
     * POST /people/{guid} : Creates a new person
     *
     * @param guid ID of person that needs to be created (required)
     * @param people Person object to be added to DB (required)
     * @return Successful operation (status code 201)
     *         or Invalid request (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/people/{guid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<People> addPeopleWithGUID(
         @PathVariable("guid") String guid,
         @Valid @RequestBody People people
    );


    /**
     * DELETE /people/{guid} : Deletes a person
     *
     * @param guid Person id to delete (required)
     * @return Successful operation (status code 200)
     *         or Invalid GUID supplied (status code 400)
     *         or Person not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/people/{guid}"
    )
    ResponseEntity<Map<String, Boolean>> deletePeople(
         @PathVariable("guid") String guid
    );


    /**
     * GET /people : Returns a list of people
     * Obtain a list of people
     *
     * @return Successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people",
        produces = { "application/json" }
    )
    ResponseEntity<List<People>> fetchAllPeople(
        
    );


    /**
     * GET /people/cars : Returns a list of people and cars relations
     * Obtain a list of people and cars
     *
     * @return Successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people/cars",
        produces = { "application/json" }
    )
    ResponseEntity<List<PeopleCar>> fetchAllPeopleCars(
        
    );


    /**
     * GET /people/{guid}/cars : Returns a list of cars assigned to the given person GUID
     * Obtain a list of cars related to a person
     *
     * @param guid ID of searched person (required)
     * @return Successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people/{guid}/cars",
        produces = { "application/json" }
    )
    ResponseEntity<List<Car>> fetchAllPersonCars(
         @PathVariable("guid") String guid
    );


    /**
     * GET /people/{guid} : Find person by ID
     * Returns a single person
     *
     * @param guid ID of person to return (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Person not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people/{guid}",
        produces = { "application/json" }
    )
    ResponseEntity<People> fetchPeopleById(
         @PathVariable("guid") String guid
    );


    /**
     * PUT /people/{guid} : Updated person
     * Update an existing person
     *
     * @param guid GUID that need to be updated (required)
     * @param body Person that needs to be added to DB (required)
     * @return Successful operation (status code 200)
     *         or Invalid GUID supplied (status code 400)
     *         or Person not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/people/{guid}",
        consumes = { "application/json" }
    )
    ResponseEntity<Map<String, Boolean>> updatePeople(
         @PathVariable("guid") String guid,
         @Valid @RequestBody People body
    );

}
